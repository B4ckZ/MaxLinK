/**
 * Registre des widgets pour le dashboard MAXLINK
 * D√©tection totalement automatique des widgets disponibles
 */
const WidgetRegistry = (function() {
    // Stockage de la configuration des widgets
    let availableWidgets = [];
    
    /**
     * D√©tecte les widgets disponibles dans le dossier widgets
     * @returns {Promise} Promise qui r√©sout avec la liste des widgets d√©tect√©s
     */
    function detectWidgets() {
        return new Promise((resolve) => {
            console.log("D√©marrage de la d√©tection automatique des widgets...");
            
            // M√©thode 1: essayer d'identifier les widgets √† partir du HTML du dossier
            tryDetectFromDirectoryListing()
                .then(widgets => {
                    if (widgets && widgets.length > 0) {
                        console.log(`D√©tection r√©ussie via l'analyse du dossier: ${widgets.length} widgets trouv√©s`);
                        availableWidgets = widgets;
                        resolve(widgets);
                    } else {
                        console.log("Analyse du dossier √©chou√©e, passage √† la m√©thode par scan...");
                        // M√©thode 2: scanner le dossier en recherchant les sous-dossiers
                        return scanWidgetsDirectory();
                    }
                })
                .then(widgets => {
                    if (widgets && widgets.length > 0) {
                        console.log(`D√©tection r√©ussie via scan: ${widgets.length} widgets trouv√©s`);
                        availableWidgets = widgets;
                        resolve(widgets);
                    } else {
                        console.warn("Aucun widget d√©tect√© par aucune m√©thode.");
                        availableWidgets = [];
                        resolve([]);
                    }
                })
                .catch(error => {
                    console.error("Erreur lors de la d√©tection des widgets:", error);
                    availableWidgets = [];
                    resolve([]);
                });
        });
    }
    
    /**
     * Tente de d√©tecter les widgets en analysant la liste des dossiers
     * @returns {Promise} Promise qui r√©sout avec la liste des widgets ou un tableau vide
     */
    function tryDetectFromDirectoryListing() {
        return new Promise((resolve) => {
            fetch('widgets/')
                .then(response => {
                    if (!response.ok) {
                        console.warn('Impossible de lire le dossier des widgets.');
                        resolve([]);
                        return;
                    }
                    return response.text();
                })
                .then(html => {
                    if (!html) {
                        console.warn('R√©ponse HTML vide.');
                        resolve([]);
                        return;
                    }
                    
                    console.log("Analyse de la r√©ponse HTML pour la d√©tection des widgets");
                    
                    // Tentative 1: Recherche sp√©cifique pour Firefox
                    let widgets = [];
                    if (html.includes('üìÅ') || html.includes('folder.gif')) {
                        const folderRegex = /<a[^>]*>(.*?)<\/a>/g;
                        let match;
                        while ((match = folderRegex.exec(html)) !== null) {
                            if (match[1].includes('üìÅ') || match[1].includes('folder.gif') || match[1].includes('Vers un r√©p')) {
                                // Ignorer les ic√¥nes et liens "Vers un r√©p"
                                continue;
                            }
                            
                            // Nettoyer le nom du dossier
                            const folderName = match[1].trim();
                            if (folderName && folderName !== '..' && folderName !== '.') {
                                widgets.push({ id: folderName });
                            }
                        }
                    }
                    
                    // Tentative 2: Recherche g√©n√©rique de liens avec slash final (/)
                    if (widgets.length === 0) {
                        const folderRegex = /<a[^>]*href="([^"]+\/)"[^>]*>(.*?)<\/a>/g;
                        let match;
                        while ((match = folderRegex.exec(html)) !== null) {
                            const folderPath = match[1];
                            // Extraire le nom du dossier du chemin
                            const folderName = folderPath.replace(/\/$/, ''); // Supprimer le / final
                            
                            // Si le dossier a un nom valide (pas .. ni .)
                            if (folderName && folderName !== '..' && folderName !== '.') {
                                widgets.push({ id: folderName });
                            }
                        }
                    }
                    
                    resolve(widgets);
                })
                .catch(error => {
                    console.error('Erreur lors de l\'analyse du dossier:', error);
                    resolve([]);
                });
        });
    }
    
    /**
     * Scanne le dossier widgets en recherchant les sous-dossiers
     * @returns {Promise} Promise qui r√©sout avec la liste des widgets d√©tect√©s
     */
    function scanWidgetsDirectory() {
        return new Promise((resolve) => {
            console.log("D√©marrage du scan du dossier widgets...");
            
            // Nous allons tester directement tous les chemins possibles
            // en nous basant sur les conventions de nommage communes
            
            // Liste de noms de widgets potentiels √† tester
            // Cette liste est g√©n√©r√©e dynamiquement √† partir des mod√®les courants
            const potentialNames = [
                // Conventions de nommage camelCase
                'logo', 'rebootButton', 'serverMonitoring', 'mqttLogs',
                'mqttStats', 'wifiStats', 'uptime', 'dashboard', 'status',
                'settings', 'config', 'system', 'user', 'network', 'storage',
                'memory', 'cpu', 'temperature', 'humidity', 'pressure',
                'weather', 'clock', 'calendar', 'notification', 'alert',
                'alarm', 'timer', 'counter', 'gauge', 'chart', 'graph',
                'table', 'list', 'grid', 'form', 'input', 'output', 'display',
                
                // Conventions avec tirets
                'reboot-button', 'server-monitoring', 'mqtt-logs',
                'mqtt-stats', 'wifi-stats',
                
                // Conventions avec underscores
                'reboot_button', 'server_monitoring', 'mqtt_logs',
                'mqtt_stats', 'wifi_stats',
                
                // Noms sp√©cifiques √† votre application (observ√©s dans votre code)
                'mqttlogs509511', 'mqttlogs999'
            ];
            
            // Effectuer des requ√™tes pour tester l'existence de chaque widget potentiel
            Promise.all(
                // Pour chaque nom potentiel, v√©rifie si le dossier existe
                // et si le fichier HTML correspondant existe
                potentialNames.map(name => 
                    Promise.all([
                        // V√©rifie si le dossier existe
                        fetch(`widgets/${name}/`).then(r => r.ok).catch(() => false),
                        // V√©rifie si le fichier HTML existe
                        fetch(`widgets/${name}/${name}.html`).then(r => r.ok).catch(() => false)
                    ]).then(([folderExists, htmlExists]) => {
                        // Si au moins l'un des deux existe, consid√®re que le widget existe
                        if (folderExists || htmlExists) {
                            return { id: name };
                        }
                        return null;
                    })
                )
            ).then(results => {
                // Filtrer les r√©sultats nuls
                const detectedWidgets = results.filter(w => w !== null);
                console.log(`Scan termin√©: ${detectedWidgets.length} widgets potentiels trouv√©s`);
                
                // V√©rifier que les widgets trouv√©s sont r√©ellement valides
                validateWidgets(detectedWidgets).then(validWidgets => {
                    console.log(`Validation termin√©e: ${validWidgets.length} widgets valides`);
                    resolve(validWidgets);
                });
            }).catch(error => {
                console.error('Erreur lors du scan des widgets:', error);
                resolve([]);
            });
        });
    }
    
    /**
     * Valide que les widgets d√©tect√©s sont r√©ellement valides
     * @param {Array} widgets - Liste des widgets √† valider
     * @returns {Promise} Promise qui r√©sout avec la liste des widgets valides
     */
    function validateWidgets(widgets) {
        return new Promise((resolve) => {
            // V√©rifie que chaque widget a un fichier JS valide
            Promise.all(
                widgets.map(widget => 
                    fetch(`widgets/${widget.id}/${widget.id}.js`)
                        .then(response => {
                            if (response.ok) {
                                return widget;
                            }
                            return null;
                        })
                        .catch(() => null)
                )
            ).then(results => {
                const validWidgets = results.filter(w => w !== null);
                resolve(validWidgets);
            }).catch(() => {
                // En cas d'erreur, on consid√®re que tous les widgets sont valides
                resolve(widgets);
            });
        });
    }
    
    /**
     * V√©rifie si un widget existe
     * @param {string} id - ID du widget √† v√©rifier
     * @returns {Promise<boolean>} True si le widget existe, false sinon
     */
    function widgetExists(id) {
        return new Promise((resolve) => {
            fetch(`widgets/${id}/${id}.html`)
                .then(response => {
                    resolve(response.ok);
                })
                .catch(() => {
                    resolve(false);
                });
        });
    }
    
    /**
     * Obtient la liste des widgets disponibles
     * @returns {Array} Liste des widgets disponibles
     */
    function getAvailableWidgets() {
        return availableWidgets;
    }
    
    // API publique
    return {
        detectWidgets,
        widgetExists,
        getAvailableWidgets
    };
})();